/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.autofillselector;

import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.kroll.common.Log;
import android.provider.Settings;
import org.appcelerator.kroll.common.TiConfig;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.view.autofill.AutofillId;
import android.view.autofill.AutofillManager;

@Kroll.module(name = "Autofillerselector", id = "de.appwerft.autofillselector", propertyAccessors = { "onResult" })
public class AutofillselectorModule extends KrollModule {
	// Standard Debugging variables
	public static final String LCAT = "ðŸ¥µAutofiller";
	private Context ctx = TiApplication.getInstance().getApplicationContext();
	private AutofillManager autofillManager = ctx.getSystemService(AutofillManager.class);
	private static final int REQUEST_CODE_SET_DEFAULT = 1337;

	@Kroll.constant
	public static final int RESULT_OK = Activity.RESULT_OK;
	@Kroll.constant
	public static final int RESULT_CANCELED = Activity.RESULT_CANCELED;

	public AutofillselectorModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	@Kroll.method
	public boolean hasEnabledAutofillServices() {
		return autofillManager.hasEnabledAutofillServices();
	}

	@Kroll.method
	public boolean isEnabled() {
		return autofillManager.isEnabled();
	}

	@Kroll.method
	public boolean isAutofillSupported() {
		return autofillManager.isAutofillSupported();
	}

	@Kroll.method
	public void disableAutofillService() {
		autofillManager.disableAutofillServices();
	}

	@Kroll.method
	public void cancel() {
		autofillManager.cancel();
		;
	}

	@Kroll.method
	public void commit() {
		autofillManager.commit();
		;
	}

	@Kroll.method
	public String getAutofillServiceComponentName() {
		ComponentName cname = autofillManager.getAutofillServiceComponentName();
		return cname.flattenToString();

	}

	@Kroll.method
	public String getDefaultFieldClassificationAlgorithm() {
		return autofillManager.getDefaultFieldClassificationAlgorithm();
	}

	@Kroll.method
	public Object[] getAvailableFieldClassificationAlgorithms() {
		return autofillManager.getAvailableFieldClassificationAlgorithms().toArray();
	}

	@Kroll.method
	public String getUserDataId() {
		return autofillManager.getUserDataId();
	}

	@Kroll.method
	public boolean requestAutofill() {
		return requestAutofillService();
	}

	@Kroll.method
	public boolean requestAutofillService() {
		if (autofillManager != null && !autofillManager.hasEnabledAutofillServices()) {
			Intent intent = new Intent(Settings.ACTION_REQUEST_SET_AUTOFILL_SERVICE);
			intent.setData(Uri.parse("package:" + TiApplication.getInstance().getPackageName()));
			final TiActivitySupport activitySupport = (TiActivitySupport) TiApplication.getInstance()
					.getCurrentActivity();
			activitySupport.launchActivityForResult(intent, REQUEST_CODE_SET_DEFAULT,
					new AutofillServiceResultHandler());

			return false;
		} else {
			return true;
		}
	}

	private final class AutofillServiceResultHandler implements TiActivityResultHandler {
		public void onError(Activity arg0, int arg1, Exception e) {
			Log.e(LCAT, e.getMessage());
		}

		public void onResult(Activity dummy, int requestCode, int resultCode, Intent data) {
			if (requestCode == REQUEST_CODE_SET_DEFAULT) {
				if (hasProperty("onResult")) {
					KrollFunction cb = (KrollFunction) getProperty("onResult");
					KrollObject ko = getKrollObject();
					KrollDict event = new KrollDict();
					event.put("code", resultCode);
					cb.call(ko, event);
				}

			}

		}
	}
}
